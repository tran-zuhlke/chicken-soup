// schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        String     @default(cuid()) @id
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  @@map(name: "posts")
}

model User {
  id            String       @default(cuid()) @id
  name          String?
  image         String?
  emailVerified Boolean? @default(false)
  email         String?   @unique
  password      String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  userDishes    UserDish[]
  @@map(name: "users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}


model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Dish {
  id        String     @default(cuid()) @id
  title     String
  price     Int
  imageUrl  String?
  active    Boolean? @default(false)
  createdAt DateTime  @default(now()) @map(name: "created_at")
  userDishes    UserDish[]
  @@map(name: "dishes")
}

model Payment {
  id        String     @default(cuid()) @id
  title     String
  imageUrl  String?
  description  String?
  createdAt DateTime  @default(now()) @map(name: "created_at")
  @@map(name: "payments")
}

model UserDish {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
  dishId       String   @map("dish_id")
  dish         Dish     @relation(fields:[dishId], references:[id], onDelete: Cascade)
  createdAt    DateTime  @default(now()) @map(name: "created_at")
}
